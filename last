Console.WriteLine("Задача 64: Задайте значения M и N. Напишите программу, которая " +
    "выведет все чётные натуральные числа в промежутке от M до N с помощью рекурсии.");
Console.WriteLine("Введите M:");
int M = Convert.ToInt32(Console.ReadLine());
Console.WriteLine("Введите N:");
int N = Convert.ToInt32(Console.ReadLine());

void AllEvenNumers(int M, int N)
{
    if (M > N) return;
    if (M % 2 == 1) M += 1;

    Console.Write($"{M}, ");
    AllEvenNumers(M + 2, N);
}

AllEvenNumers(M,N);
Console.WriteLine();



//////////////////////////////////////
Console.WriteLine("Задача 66: Задайте значения M и N. Напишите программу, " +
    "которая найдёт сумму натуральных элементов в промежутке от M до N с помощью рекурсии.");
int m = InputInt("Введите M:");
int n = InputInt("Введите N:");
Console.WriteLine($"Сумма элементов от {m} до {n} = {CountNaturalSum(m, n)}");

int InputInt(string output)
{
    Console.Write(output);
    return int.Parse(Console.ReadLine());
}

int CountNaturalSum(int m, int n)
{
    if (m == n)
        return n;
    return n + CountNaturalSum(m, n - 1);
}


//////////////////////
Console.Clear();
Console.WriteLine("Задача 68: Задайте значения M и N. Напишите программу, " +
    "которая найдёт наибольший общий делитель (НОД) этих чисел с помощью рекурсии.\nM = 28; N = 7 -> 7");

int a = 0;
a = AskForInput("меньшее");
int b = AskForInput("большее");
int nod = a;

System.Console.WriteLine($"\nНаибольший общий делитель (НОД) для натуральных чисел {a} и {b} - {PrintNOD(a, b, nod)}");

int AskForInput(string str)
{
    while (true)
    {
        Console.Write($"\nНапишите {str} натуральное число:");
        if (int.TryParse(Console.ReadLine(), out int number))
        {
            if (number > 0 && number > a)
            {
                return number;
                break;
            }
            else Console.WriteLine($"Некорректно указано {str} натуральное число!\n");
        }
        else Console.WriteLine($"Некорректно указано {str} натуральное число!\n");
    }
}

int PrintNOD(int first, int second, int nod)
{
    return second % nod == 0 && first % nod == 0 ? nod : PrintNOD(first, second, nod - 1);
}


